package Timekeeping.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import java.awt.Color;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.editor.runtime.style.Padding;
import jetbrains.mps.editor.runtime.style.Measure;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.editor.runtime.EditorCell_Empty;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;

/*package*/ class DailyTimeRecord_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public DailyTimeRecord_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_6ww6yi_a();
  }

  private EditorCell createCollection_6ww6yi_a() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_6ww6yi_a");
    editorCell.setBig(true);
    editorCell.setCellContext(getCellFactory().getCellContext());
    Style style = new StyleImpl();
    style.set(StyleAttributes.DRAW_BORDER, true);
    style.set(StyleAttributes.BACKGROUND_COLOR, StyleRegistry.getInstance().getSimpleColor(new Color(14540253)));
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createCollection_6ww6yi_a0());
    return editorCell;
  }
  private EditorCell createCollection_6ww6yi_a0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_6ww6yi_a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.DRAW_BORDER, true);
    style.set(StyleAttributes.BACKGROUND_COLOR, StyleRegistry.getInstance().getSimpleColor(new Color(11915775)));
    style.set(StyleAttributes.PADDING_BOTTOM, new Padding(1, Measure.SPACES));
    style.set(StyleAttributes.PADDING_TOP, new Padding(1, Measure.SPACES));
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createConstant_6ww6yi_a0a());
    editorCell.addEditorCell(createProperty_6ww6yi_b0a());
    editorCell.addEditorCell(createConstant_6ww6yi_c0a());
    editorCell.addEditorCell(createCollection_6ww6yi_d0a());
    editorCell.addEditorCell(createEmpty_6ww6yi_e0a());
    return editorCell;
  }
  private EditorCell createConstant_6ww6yi_a0a() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "day");
    editorCell.setCellId("Constant_6ww6yi_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_6ww6yi_b0a() {
    CellProviderWithRole provider = new PropertyCellProvider(myNode, getEditorContext());
    provider.setRole("day");
    provider.setNoTargetText("<no day>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(getEditorContext());
    editorCell.setCellId("property_day");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_6ww6yi_c0a() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "intervals:");
    editorCell.setCellId("Constant_6ww6yi_c0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_6ww6yi_d0a() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_6ww6yi_d0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createJComponent_6ww6yi_a3a0());
    editorCell.addEditorCell(createJComponent_6ww6yi_b3a0());
    return editorCell;
  }
  private EditorCell createJComponent_6ww6yi_a3a0() {
    EditorCell editorCell = EditorCell_Component.createComponentCell(getEditorContext(), myNode, _QueryFunction_JComponent_6ww6yi_a0d0a(), "_6ww6yi_a3a0");
    editorCell.setCellId("JComponent_6ww6yi_a3a0");
    return editorCell;
  }
  private JComponent _QueryFunction_JComponent_6ww6yi_a0d0a() {
    DTR__TableModel tableModel = new DTR__TableModel(SLinkOperations.getChildren(myNode, MetaAdapterFactory.getContainmentLink(0xd3ca43b801a74083L, 0xba4e9769ab8f1643L, 0x3d9500dd65f386f8L, 0x3d9500dd65f38703L, "intervals")), getEditorContext().getRepository(), new TimekeepingTableDataProvider());
    JTable table = new JTable(tableModel);
    tableModel.initialize(table);
    JScrollPane scrollpane = new JScrollPane(table);
    return scrollpane;
  }
  private EditorCell createJComponent_6ww6yi_b3a0() {
    EditorCell editorCell = EditorCell_Component.createComponentCell(getEditorContext(), myNode, _QueryFunction_JComponent_6ww6yi_a1d0a(), "_6ww6yi_b3a0");
    editorCell.setCellId("JComponent_6ww6yi_b3a0");
    return editorCell;
  }
  private JComponent _QueryFunction_JComponent_6ww6yi_a1d0a() {

    JButton button = new JButton("Add new interval");
    button.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        getEditorContext().getRepository().getModelAccess().executeCommand(new Runnable() {
          public void run() {
            SLinkOperations.addNewChild(myNode, MetaAdapterFactory.getContainmentLink(0xd3ca43b801a74083L, 0xba4e9769ab8f1643L, 0x3d9500dd65f386f8L, 0x3d9500dd65f38703L, "intervals"), MetaAdapterFactory.getConcept(0xd3ca43b801a74083L, 0xba4e9769ab8f1643L, 0x3d9500dd65f38701L, "Timekeeping.structure.WorkInterval"));
          }
        });
      }
    });
    return button;
  }
  private EditorCell createEmpty_6ww6yi_e0a() {
    EditorCell_Empty editorCell = new EditorCell_Empty(getEditorContext(), myNode);
    editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(editorCell.getSNode(), CellAction_DeleteNode.DeleteDirection.FORWARD));
    editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(editorCell.getSNode(), CellAction_DeleteNode.DeleteDirection.BACKWARD));
    editorCell.setCellId("Empty_6ww6yi_e0a");
    return editorCell;
  }
}
