package Timekeeping.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_DailyTimeRecord;
  private ConceptPresentation props_MonthlyTimeRecord;
  private ConceptPresentation props_WorkInterval;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.DailyTimeRecord:
        if (props_DailyTimeRecord == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("day");
          props_DailyTimeRecord = cpb.create();
        }
        return props_DailyTimeRecord;
      case LanguageConceptSwitch.MonthlyTimeRecord:
        if (props_MonthlyTimeRecord == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("month");
          props_MonthlyTimeRecord = cpb.create();
        }
        return props_MonthlyTimeRecord;
      case LanguageConceptSwitch.WorkInterval:
        if (props_WorkInterval == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("interval");
          props_WorkInterval = cpb.create();
        }
        return props_WorkInterval;
    }
    return null;
  }
}
